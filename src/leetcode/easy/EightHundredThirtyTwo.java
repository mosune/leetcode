package leetcode.easy;

/**
 * 832. 翻转图像
 *
 * 给定一个二进制矩阵 A，我们想先水平翻转图像，然后反转图像并返回结果。
 *
 * 水平翻转图片就是将图片的每一行都进行翻转，即逆序。例如，水平翻转 [1, 1, 0] 的结果是 [0, 1, 1]。
 *
 * 反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。例如，反转 [0, 1, 1] 的结果是 [1, 0, 0]。
 *
 * 示例 1:
 *
 * 输入: [[1,1,0],[1,0,1],[0,0,0]]
 * 输出: [[1,0,0],[0,1,0],[1,1,1]]
 * 解释: 首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；
 *      然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]
 * 示例 2:
 *
 * 输入: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
 * 输出: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
 * 解释: 首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；
 *      然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
 * 说明:
 *
 * 1 <= A.length = A[0].length <= 20
 * 0 <= A[i][j] <= 1
 *
 * @author gcg
 * @create 2019-12-19 10:24
 **/
public class EightHundredThirtyTwo {

//    public int[][] flipAndInvertImage(int[][] A) {
//        for (int i = 0; i < A.length; i++) {
//            for (int j = 0; j < A[0].length / 2; j++) {
//                if (A[i][j] == A[i][A[0].length - j - 1]) {
//                    if (A[i][j] == 0) {
//                        A[i][j] = 1;
//                        A[i][A[0].length - j - 1] = 0;
//                    } else {
//                        A[i][j] = 0;
//                        A[i][A[0].length - j - 1] = 1;
//                    }
//                }
//            }
//        }
//        if (A[0].length % 2 == 1) {
//            for (int i = 0; i < A.length; i++) {
//                if (A[i][A[0].length / 2] == 0) A[i][A[0].length / 2] = 1;
//                else A[i][A[0].length / 2] = 0;
//            }
//        }
//        return A;
//    }

    public int[][] flipAndInvertImage(int[][] A) {
        for (int i = 0; i < A.length; i++) {
            // 加1很精髓
            for (int j = 0; j < (A[0].length + 1) / 2; j++) {
                // 异或很简洁
                int t = A[i][j] ^ 1;
                A[i][j] = A[i][A.length - j - 1] ^ 1;
                A[i][A.length - j - 1] = t;
            }
        }
        return A;
    }

}
